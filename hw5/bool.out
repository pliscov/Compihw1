@divzero = internal constant [23 x i8] c"Error division by zero\00"
declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"

define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}

define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}

define void @main() {
br label %exp1
exp1:
br label %exp2
exp2:
br label %reloplabel1
reloplabel1:
br label %exp3
exp3:
%t1 = icmp sle i32 1, 2
br i1 %t1, label %truelabel1, label %falselabel1
br label %truelabel1
truelabel1:
br label %endlabel1
falselabel1:
br label %endlabel1
endlabel1:
%t2 = phi i32 [1, %truelabel1], [0, %falselabel1]
%ptr1 = alloca i32
store i32 %t2, i32* %ptr1
br label %exp4
exp4:
br label %exp5
exp5:
br label %reloplabel2
reloplabel2:
br label %exp6
exp6:
%t3 = icmp slt i32 1, 2
br i1 %t3, label %truelabel2, label %falselabel2
br label %truelabel2
truelabel2:
br label %endlabel2
falselabel2:
br label %endlabel2
endlabel2:
%t4 = phi i32 [1, %truelabel2], [0, %falselabel2]
%ptr2 = alloca i32
store i32 %t4, i32* %ptr2
br label %exp7
exp7:
%t5 = load i32, i32* %ptr1
%t6 = icmp eq i32 1, %t5
br i1 %t6, label %exp8, label %falselabel3
br label %exp8
exp8:
%t7 = load i32, i32* %ptr2
%t8 = icmp eq i32 1, %t7
br i1 %t8, label %truelabel3, label %falselabel3
br label %exp9
exp9:
br label %truelabel3
truelabel3:
br label %endlabel3
falselabel3:
br label %endlabel3
endlabel3:
%t9 = phi i32 [1, %truelabel3], [0, %falselabel3]
%ptr3 = alloca i32
store i32 %t9, i32* %ptr3
br label %exp10
exp10:
%t10 = load i32, i32* %ptr3
%t11 = icmp eq i32 1, %t10
br i1 %t11, label %truelabel4, label %endlabel4
br label %truelabel4
truelabel4:
br label %exp11
exp11:
call void @printi(i32 7)
br label %endlabel4
endlabel4:
ret void
}
