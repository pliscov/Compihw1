%{
	#include <iostream>
	#include <cstdlib>
	#include <memory>
	#include "bp.hpp"
	#include "hw3_output.hpp"
	#include "types.hpp"
	#include "utils.hpp"
	#include <fstream>
	#include <sstream>

	TableManager manager;
	CodeBuffer& buffer = CodeBuffer::instance();
	bool inPrintArgs = false;
	extern int yylex();
	extern int yylineno;
	extern int yyleng;
	extern char* yytext;
	int freshNum = 0;
	int yyerror(const char * message);
	void zext(TYPEClass* exp1, TYPEClass* exp2)
	{
		if (exp1->type != exp2->type)
		{
			TYPEClass* e = exp1->type == "BYTE" ? exp1 : exp2;
			std::string temp = e->reg;
			e->reg = fresh("%t");
			buffer.emit(e->reg + " = zext i8 " + temp + " to i32");
		}
	}

	

	void hook(TYPEClass* exp, std::string prompt){
		exp->hooklabel = fresh(prompt);
		exp->hooklist.push_back(std::pair<int, BranchLabelIndex>(buffer.emit("br label @"), FIRST));
		buffer.emit(exp->hooklabel + ":");
	}

	void hook(TYPEClass* exp){
		hook(exp, "exp");
	}

	void bphook(TYPEClass* exp){
		buffer.bpatch(exp->hooklist, exp->hooklabel);
	}
	/* THE CURRENT PROBLEM IS MOSTLY PASSING ARGUMENTS TO FUNCTIONS */
	/* other than that idk everything works so far */

%}


%right IF
%right ELSE

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ASSIGN
%token RELOP
%token <id> ID
%token NUM
%token STRING
%type <funcid> FuncID;
%type <ExpList> ExpList Formals FormalsList
%type <Func> FuncsDecl
%type <TYPE> Exp Type Call FormalDecl RetType BoolExp Statement Statements GOTO TRUELABEL FALSELABEL

%left OR
%left AND
%left RELOP
%left ADD SUB
%left MULT DIV
%left NOT
%right LBRACE RBRACE LPAREN RPAREN

%%

Program 	: Funcs		{}
;
Funcs		: /*epsilon*/		{}
			| FuncsDecl Funcs	{}
;
FuncsDecl 	: RetType FuncID LPAREN Formals
			{
				//freshNum = 0;
				if (manager.get($2) != nullptr)
				{
					output::errorDef(yylineno, $2);
					exit(1);
				}
				FuncClass* func = new FuncClass();

				func->name = $2;
			    func->type = $1.type;
				func->params = $4.list;
				func->ret_type = $1.type;

				if (manager.contains($2))
				{
					output::errorDef(yylineno, $2);
					exit(1);
				}

                manager.insert(func);
				manager.newScope("func", func->ret_type);
				manager.insertParams($4.list, true);
				buffer.emit("define " + getSizeByType(func->ret_type) + " @" + func->name + "(" + $4.getParams() + ") {");


			} RPAREN LBRACE Statements RBRACE 	
			{
				FuncClass *func = dynamic_cast<FuncClass*>(manager.get($2));
				if (func == nullptr)
				{
					printf("bad pointer");
					exit(1);
				}
				///*output::endScope*/();
				manager.popScope();
				buffer.emit("ret " + getSizeByType(func->ret_type) + " " + initialize(func->ret_type));
				buffer.emit("}");
			}
;
RetType 	: Type	{$$.type = $$.name = $1.type;}
			| VOID  {$$.type = "VOID";}
;
Formals 	: /*epsilon*/ {}
			| FormalsList 	{
								$$.list = $1.list;

							}
;
FormalsList : FormalDecl {$$.list.push_back(TYPEClass($1));}
			| FormalDecl COMMA FormalsList { $$.list.push_back($1); $$.list.insert( $$.list.end(), $3.list.begin(), $3.list.end() );}
;
FormalDecl 	: Type ID 	{
							if(manager.contains(yylval.id))
							{
								output::errorDef(yylineno, yylval.id);
								exit(1);
							}
							$$.type = $1.type;
							$$.name = yylval.id;
							
							$$.reg = fresh("%param");
						}
;
NEWSCOPE : {manager.newScope("if");};
ENDSCOPE : {/*output::endScope();*/manager.popScope();}
BoolExp : Exp 						{
										checkBoolean($1); 
										$$ = $1;
									}
Statements 	: Statement 			{
										$$ = $1;
										$$.continuelist = $1.continuelist;
										$$.breaklist = $1.breaklist;
										
									}
		   	| Statements Statement 	{ 
										$$ = $1;
										buffer.bpatch($1.nextlist, $2.label);
										$$.nextlist = $2.nextlist;
										$$.continuelist = CodeBuffer::merge($1.continuelist, $2.continuelist);
										$$.breaklist = CodeBuffer::merge($1.breaklist, $2.breaklist);
										
									}
									
;

TRUELABEL : {$$.label = fresh("truelabel"); buffer.emit("br label %" + $$.label); buffer.emit($$.label + ":");}
FALSELABEL : {$$.label = fresh("falselabel"); buffer.emit("br label %" + $$.label); buffer.emit($$.label + ":");}
GOTO : {$$.nextlist.push_back(std::pair<int, BranchLabelIndex>(buffer.emit("br label @"), FIRST));}
Statement 	: LBRACE {manager.newScope("regular");} Statements RBRACE 
									{
										$$ = $3;
										/*output::endScope();*/
										manager.popScope();
										
										
									}

			| Type ID SC 			{ 

										/* insert new symbol */
										if (manager.contains(yylval.id))
										{
											output::errorDef(yylineno, yylval.id);
											exit(1);
										}
										else
										{

											TYPEClass* y = new TYPEClass(yylval.id, $1.type);
											y->ptr = fresh("%ptr");
											buffer.emit(y->ptr + " = alloca i32");
											buffer.emit("store i32 0, i32* " + y->ptr);
											manager.insertID(y);
											
										}

									}
			| Type ID { $2 = std::string(yylval.id);} ASSIGN Exp SC {
										bphook(&$5);
										/* insert a symbol, maybe cast */
										if (manager.contains($2))
										{
											output::errorDef(yylineno, $2);
											exit(1);
										}
										if (!legalAssign($5.type, $1.type))
										{
											output::errorMismatch(yylineno);
											exit(1);
										}
										else
										{
											
											TYPEClass* y = new TYPEClass($2, $1.type);
											if (y->type == "BOOL")
											{
												

												y->ptr = fresh("%ptr");
												std::string truelabel = fresh("truelabel"), falselabel = fresh("falselabel"), endlabel = fresh("endlabel");
												buffer.emit("br label %" + truelabel);
												buffer.emit(truelabel + ":");
												buffer.emit("br label %" + endlabel);
												buffer.emit(falselabel + ":");
												buffer.emit("br label %" + endlabel);
												buffer.emit(endlabel + ":");
												std::string temp = fresh("%t");
												buffer.emit(temp + " = phi i32 [1, %" + truelabel + "], [0, %" + falselabel + "]");
												buffer.emit(y->ptr + " = alloca i32");
												buffer.emit("store i32 " + temp +", i32* " + y->ptr);
												buffer.bpatch($5.truelist, truelabel);
												buffer.bpatch($5.falselist, falselabel);
												manager.insertID(y);

												
											}
											else
											{
												y->ptr = fresh("%ptr");
												buffer.emit(y->ptr + " = alloca i32");
												std::string zextvar = fresh("%z");
												zextvar = $5.reg;
												////////////////////////// MAY CAUSE BUGS : ZEXT I32 TO I32 ????? /////////////
												/*
												if ($5.type != "INT")
													buffer.emit(zextvar + " = zext " + getSizeByType($5.type) + " " + $5.reg + " to i32");
												else
													zextvar = $5.reg;
												*/
												buffer.emit("store i32 " + zextvar + ", i32* " + y->ptr);
												manager.insertID(y);
											}
										}
										
										/*todo*/
									}
			| ID {$1 = yylval.id;} ASSIGN Exp SC  	{ 
										bphook(&$4);
										/* maybe cast */
										TYPEClass* y = manager.get($1);

										if (y == nullptr)
										{
											output::errorUndef(yylineno, $1);
											exit(1);
										}

										FuncClass* func_y = dynamic_cast<FuncClass*>(y);
										if (func_y != nullptr)
										{
											output::errorUndef(yylineno, func_y->name);
											exit(1);
										}
										if (!legalAssign($4.type, y->type))
										{
											output::errorMismatch(yylineno);
											exit(1);
										}

										if (y->type == "BOOL")
										{
											/* currently using phi instead
											std::string truelabel = fresh("true"), falselabel = fresh("false"), endlabel = fresh("end");
											buffer.emit("br label %" + truelabel);
											buffer.emit(truelabel + ":");
											buffer.emit("store i32 1, i32* " + y->ptr);
											buffer.emit("br label %" + endlabel);
											buffer.emit(falselabel + ":");
											buffer.emit("store i32 0, i32* " + y->ptr);
											buffer.emit(endlabel + ":");
											buffer.bpatch($4.truelist, truelabel);
											buffer.bpatch($4.falselist, falselabel);
											*/


											y->ptr = fresh("%ptr");
											std::string truelabel = fresh("true"), falselabel = fresh("false"), endlabel = fresh("end");
											buffer.emit("br label %" + truelabel);
											buffer.emit(truelabel + ":");

											buffer.emit("br label %" + endlabel);
											buffer.emit(falselabel + ":");

											buffer.emit("br label %" + endlabel);
											buffer.emit(endlabel + ":");
											std::string temp = fresh("%t");
											buffer.emit(temp + " = phi i32 [1, %" + truelabel + "], [0, %" + falselabel + "]");
											buffer.emit(y->ptr + " = alloca i32");
											buffer.emit("store i32 " + temp +", i32* " + y->ptr);
											buffer.bpatch($4.truelist, truelabel);
											buffer.bpatch($4.falselist, falselabel);
											
										}
										else
										{	
											
											std::string zextvar = fresh("%z");
											zextvar = $4.reg;
											/*
											if ($4.type != "INT")
													buffer.emit(zextvar + " = zext " + getSizeByType($4.type) + " " + $4.reg + " to i32");
												else
													zextvar = $4.reg;
											*/
											buffer.emit("store i32 " + zextvar + ", i32* " + y->ptr);
										}
										
									}
			| Call SC				{									
									}
			| RETURN SC				{	
										/* check void ret type */
										if (!manager.legalReturn("VOID"))
										{
											/* error return mismatch*/
											output::errorMismatch(yylineno);
											exit(1);
										}
										buffer.emit("ret void");


									}
			| RETURN Exp SC			{ /* check NOT void ret type */
										bphook(&$2);
										
										if (!manager.legalReturn($2.type) || $2.type == "VOID")
										{
											/* error return mismatch*/
											output::errorMismatch(yylineno);
											exit(1);
										}
										buffer.emit("ret " + getSizeByType($2.type) + " " + $2.reg);
									}
			| IF LPAREN BoolExp RPAREN TRUELABEL NEWSCOPE Statement ENDSCOPE %prec IF 
			{
				bphook(&$3);
				$$.continuelist = $7.continuelist;
				$$.breaklist = $7.breaklist;
				$$.nextlist = CodeBuffer::merge($7.nextlist, $3.falselist);
				buffer.bpatch($3.truelist, $5.label);
				
				$$.nextlist = CodeBuffer::merge($7.nextlist, $3.falselist);

				$$.end = fresh("endlabel");
				buffer.bpatch($3.falselist, $$.end);
				buffer.emit("br label %" + $$.end);
				buffer.emit($$.end + ":");
				buffer.bpatch($$.nextlist, $$.end);

			}
			| IF LPAREN BoolExp RPAREN TRUELABEL NEWSCOPE Statement ENDSCOPE ELSE GOTO {manager.newScope("else");} FALSELABEL Statement 
			{
				bphook(&$3);

				$$.nextlist = CodeBuffer::merge($7.nextlist, $13.nextlist);
				$$.continuelist = CodeBuffer::merge($7.continuelist, $13.continuelist);
				$$.breaklist = CodeBuffer::merge($7.breaklist, $13.breaklist);
				
				
			    manager.popScope();

			    buffer.bpatch($3.truelist, $5.label);
				
			    buffer.bpatch($3.falselist, $12.label);

				$$.end = fresh("endlabel");
				buffer.emit("br label %" + $$.end);
				buffer.emit($$.end + ":");
				buffer.bpatch($$.nextlist, $$.end);

				buffer.bpatch($10.nextlist, $$.end);
				


			}
			| WHILE LPAREN BoolExp RPAREN {manager.newScope("while");} TRUELABEL Statement 
			{
				bphook(&$3);
				//also this
			    manager.popScope();
			    buffer.bpatch($3.truelist, $6.label);

				// TODO: backpatch continues and breaks

				buffer.bpatch($7.nextlist, $3.hooklabel);
			    buffer.emit("br label %"+ $3.hooklabel); // TODO : not sure about this one

				$$.end = fresh("endlabel");
				buffer.emit("br label %" + $$.end);
				buffer.emit($$.end + ":");
				buffer.bpatch($3.falselist, $$.end);
				buffer.bpatch($7.continuelist, $3.label);
				buffer.bpatch($7.breaklist, $$.end);
				
				

				
			}
			| BREAK SC  	{ 

								if (!manager.inScope("while"))
								{
								    output::errorUnexpectedBreak(yylineno);
									exit(1);
								}
								int location = buffer.emit("br label @");
								$$.breaklist.push_back(std::pair<int, BranchLabelIndex>(location, FIRST));
								
							}
			| CONTINUE SC   {
								if (!manager.inScope("while"))
								{
									output::errorUnexpectedContinue(yylineno);
									exit(1);
								}
								int location = buffer.emit("br label @");
								$$.continuelist.push_back(std::pair<int, BranchLabelIndex>(location, FIRST));
								
							}
;
Call 		: FuncID LPAREN 	{
												FuncClass* func = dynamic_cast<FuncClass*>(manager.get($1));
											
												if (func == nullptr)
												{
													output::errorUndef(yylineno, $1);
													exit(1);
												}
								}   ExpList RPAREN	
								{
												FuncClass* func = dynamic_cast<FuncClass*>(manager.get($1));
											
												if (func == nullptr)
												{
													output::errorUndefFunc(yylineno, $1);
													exit(1);
												}
												if (!func->legalParams($4.list)){
													std::vector<std::string> types;
													for (TYPEClass y: func->params)
													{
														types.push_back(y.type);
													}
													
													output::errorPrototypeMismatch(yylineno, func->name, types);
													exit(1);
												}
												$$.type = func->ret_type;
												//$4.convertParams(func->params);
												if (func->ret_type != "VOID"){
													$$.reg = fresh("%t");
													buffer.emit($$.reg + " = call " + getSizeByType(func->ret_type) + " @" + func->name + "(" + $4.getParams() + ")");
												}
												else
													buffer.emit("call " + getSizeByType(func->ret_type) + " @" + func->name + "(" + $4.getParams() + ")");
												
							}
	 		| FuncID LPAREN RPAREN				{
												FuncClass* func = dynamic_cast<FuncClass*>(manager.get($1));
												if (func == nullptr)
												{
													output::errorUndefFunc(yylineno, $1);
													exit(1);
												}
												if (!func->params.empty())
												{
													std::vector<std::string> types;
													for (TYPEClass y: func->params)
													{
														types.push_back(y.type);
													}
													
													output::errorPrototypeMismatch(yylineno, func->name, types);
													exit(1);
												}
												$$.type = func->ret_type;
												if (func->ret_type != "VOID"){
													$$.reg = fresh("%t");
													buffer.emit($$.reg + " = call " + getSizeByType(func->ret_type) + " @" + func->name + "()");
												}
												else
													buffer.emit("call " + getSizeByType(func->ret_type) + "@" + func->name + "()");
											}
;
FuncID 		: ID {$$ = yylval.id;};
ExpList 	: Exp	{
						bphook(&$1);
						$$.list.push_back($1);
						
					}
			| Exp COMMA ExpList		{
										bphook(&$1);
										$$.list.push_back($1);
										$$.list.insert( $$.list.end(), $3.list.begin(), $3.list.end());
									}
;
Type 		: INT	{ $$.type = "INT";}
			| BYTE	{ $$.type = "BYTE";}
			| BOOL	{ $$.type = "BOOL";}

;
Exp 		: LPAREN Exp RPAREN					{
													
													$$ = $2;
												}                  
			| Exp IF LPAREN GOTO Exp RPAREN ELSE Exp %prec IF {
													//hook(&$$);
													//buffer.bpatch($1.hooklist, $5.label);
													$$.label = $5.hooklabel;
													$$.hooklabel = $5.hooklabel;
													$$.hooklist = $1.hooklist;
													buffer.bpatch($5.hooklist, $5.hooklabel);
													buffer.bpatch($8.hooklist, $8.hooklabel);
													
													checkBoolean($5);
													std::string truelabel = fresh("truelabel"), falselabel = fresh("falselabel"), endlabel = fresh("endlabel");
													buffer.emit("br label %" + falselabel);
													buffer.emit(truelabel + ":");
													buffer.emit("br label %" + endlabel);
													
													buffer.emit(falselabel + ":");
													buffer.emit("br label %" + endlabel);
													
													buffer.emit(endlabel + ":");
													if (isNumeral($1) && isNumeral($8))
													{
														$$.type = largestType($1.type, $8.type);

														//std::string truelabel = fresh("truelabel"), falselabel = fresh("falselabel"), endlabel = fresh("endlabel");
														//buffer.emit("br label %" + truelabel);
														//buffer.emit(truelabel + ":");
														//buffer.emit("br label %" + endlabel);
														//buffer.emit(falselabel + ":");
														//buffer.emit("br label %" + endlabel);
														//buffer.emit(endlabel + ":");

														$$.reg = fresh("%t");
														/*
														if ($$.type == "INT")
															convertBytesToInt(&$1, &$8);
														*/
														buffer.emit($$.reg + " = phi i32" +
															" [" + $1.reg + ", %" + truelabel 
															+ " ], [" + $8.reg + ", %" + falselabel + " ]"
														);

														buffer.bpatch($5.truelist, $1.hooklabel);
														buffer.bpatch($5.falselist, $8.hooklabel);
														buffer.bpatch($4.nextlist, truelabel);

													}
													else if ($1.type != $8.type)
													{
														output::errorMismatch(yylineno);
														exit(1);
													}
													else // BOOLEAN
													{
														$$.type = $1.type;
														
														std::string endlabel = fresh("endlabel");
														buffer.emit("br label %" + endlabel);
														buffer.emit(endlabel + ":");
														buffer.bpatch($5.truelist, $1.hooklabel);
														buffer.bpatch($5.falselist, $8.label);
														buffer.bpatch($4.nextlist, truelabel);
														$$.truelist = CodeBuffer::merge($1.truelist, $8.truelist);
														$$.falselist = CodeBuffer::merge($1.falselist, $8.falselist);
														
													}
													
													
													



												}
			| Exp ADD Exp 				{
											hook(&$$, "add");
											bphook(&$1);
											bphook(&$3);
											checkNumeral($1);
											checkNumeral($3);

											$$.type = largestType($1.type, $3.type);
											$$.reg = fresh("%t");
											//zext(&$1, &$3);
											buffer.emit($$.reg + " = add i32 " + $1.reg + ", " + $3.reg);
											checkByteOverflow(&$$);
										}
			| Exp SUB Exp				{
											hook(&$$, "sub");
											bphook(&$1);
											bphook(&$3);
											checkNumeral($1);
											checkNumeral($3);

											$$.type = largestType($1.type, $3.type);
											$$.reg = fresh("%t");
											//zext(&$1, &$3);
											buffer.emit($$.reg + " = sub i32 " + $1.reg + ", " + $3.reg);
											checkByteOverflow(&$$);
										}
			| Exp DIV Exp				{
											hook(&$$, "div");
											bphook(&$1);
											bphook(&$3);
											checkNumeral($1);
											checkNumeral($3);
											$$.type = largestType($1.type, $3.type);
											$$.reg = fresh("%t");
											//zext(&$1, &$3);
											std::string instr = $$.type == "INT" ? "sdiv" : "udiv";
											std::string divzero = fresh("divzerolabel"), end_divzero = fresh("end_divzerolabel");
											std::string temp = fresh("%t");

											buffer.emit(temp + " = icmp eq i32 0, " + $3.reg);
											buffer.emit("br i1 " + temp + ", label %" + divzero + ", label %" + end_divzero);
											buffer.emit(divzero + ":");
											std::string stringptr = fresh("%ptr");
											buffer.emit(stringptr + " = getelementptr [23 x i8], [23 x i8]* @divzero, i32 0, i32 0");
											buffer.emit("call void @print(i8* " + stringptr + ")");
											buffer.emit("call void @exit(i32 1)");
											buffer.emit("br label %" + end_divzero);
											buffer.emit(end_divzero + ":");
											buffer.emit($$.reg + " = " + instr + " i32 " + $1.reg + ", " + $3.reg);
											checkByteOverflow(&$$);
			
										}
			
			| Exp MULT Exp				{	
											hook(&$$, "mul");
											bphook(&$1);
											bphook(&$3);
											checkNumeral($1);
											checkNumeral($3);
											$$.type = largestType($1.type, $3.type);
											$$.reg = fresh("%t");
											//zext(&$1, &$3);
											buffer.emit($$.reg + " = mul i32 " + $1.reg + ", " + $3.reg);
											checkByteOverflow(&$$);
										}
			| ID 						{
											hook(&$$, "id");
											TYPEClass* y = manager.get(yylval.id);

											if (y == nullptr)
											{
												output::errorUndef(yylineno, yylval.id);
												exit(1);
											}
											if (dynamic_cast<FuncClass*>(y) != nullptr)
											{
												output::errorUndef(yylineno, yylval.id);
												exit(1);
											}

											
											
											$$.reg = y->reg;
											$$.type = y->type;

											/*
											if (y->isParam)
											{
												$$.reg = 

											}
											*/
											
											if (!y->isParam)
											{
												$$.reg = fresh("%t");
												buffer.emit($$.reg + " = load i32, i32* " + y->ptr);
												if (y->type == "BYTE")
												{
													truncZext(&$$);	
												}
											}

											if (y->type == "BOOL")
											{
												//std::string idlabel = fresh("idlabel");
												//buffer.emit("br label %" + idlabel);
												$$.label = $$.hooklabel;
												//buffer.emit(idlabel + ":");

												std::string temp = fresh("%t");

												buffer.emit(temp + " = icmp eq i32 1, " + $$.reg);
												int location = buffer.emit("br i1 " + temp + ", label @, label @");
												$$.truelist.push_back(std::pair<int, BranchLabelIndex>(location, FIRST));
												$$.falselist.push_back(std::pair<int, BranchLabelIndex>(location, SECOND));
												
											}
										}
			| Call						{
											hook(&$$, "call");
											$$.type = $1.type;
											$$.reg = $1.reg;
											

										}
			| NUM						{
											hook(&$$, "num");
											$$.type = "INT";
											$$.reg = std::to_string(yylval.byte);
										}
			| NUM B 					{
											hook(&$$, "byte");
											$$.type = "BYTE";
											checkByte(yylval.byte);
											$$.reg = std::to_string(yylval.byte);
										}
			| STRING					{
											
											$$.type = "STRING";
											std::string global = fresh("@str");
											yytext += 1;
											yytext[yyleng - 2] = '\0';
											int size = std::string(yytext).size() + 1;
											buffer.emitGlobal(global + " = internal constant [" 
											+ std::to_string(size) + " x i8] c\"" + yytext + "\\00\"");
											$$.reg = fresh("%ptr");
											std::string type = "[" + std::to_string(size) + " x i8]";
											buffer.emit($$.reg + " = getelementptr " + type + ", " + 
											 type + "* " + global + ", i32 0, i32 0");

											
										}
			| TRUE						{

											hook(&$$, "true");
											$$.label = fresh("truebool");
											buffer.emit("br label %" + $$.label);
											buffer.emit($$.label + ":");
											
											$$.type = "BOOL";
											$$.reg = "true";
											
											int location = buffer.emit("br label @");
											$$.truelist.push_back(std::pair<int, BranchLabelIndex>(location, FIRST));

											
										}
			| FALSE						{
											hook(&$$, "false");
											$$.label = fresh("falsebool");
											buffer.emit("br label %" + $$.label);
											buffer.emit($$.label + ":");
											$$.type = "BOOL";
											$$.reg = "false";
											
											int location = buffer.emit("br label @");
											$$.falselist.push_back(std::pair<int, BranchLabelIndex>(location, FIRST));

										}
			| NOT Exp					{

											hook(&$$, "not");
											bphook(&$2);
											checkBoolean($2);
											$$.type = "BOOL";
											$$.label = $2.hooklabel;
											$$.truelist = $2.falselist;
											$$.falselist = $2.truelist;
										}
			| Exp AND Exp				{
											$$.hooklabel = $1.hooklabel;
											//hook(&$$, "and");
											bphook(&$1);
											bphook(&$3);
											checkBoolean($1);
											checkBoolean($3);
											$$.type = std::string("BOOL");
											$$.label = $1.hooklabel;

											buffer.bpatch($1.truelist, $3.hooklabel);
											$$.falselist = CodeBuffer::merge($1.falselist, $3.falselist);;
											$$.truelist = $3.truelist;


											

										}
			| Exp OR Exp				{
											$$.hooklabel = $1.hooklabel;
											//hook(&$$, "or");
											bphook(&$1);
											bphook(&$3);
											checkBoolean($1);
											checkBoolean($3);
											$$.type = std::string("BOOL");
											$$.label = $1.hooklabel;
											$$.truelist = CodeBuffer::merge($1.truelist, $3.truelist);
											buffer.bpatch($1.falselist, $3.hooklabel);
											$$.falselist = $3.falselist;
											
											
											
										}
			| Exp RELOP Exp				{
											
											$$.label = fresh("reloplabel");
											$$.hooklabel = $1.hooklabel;
											buffer.emit("br label %" + $$.label);
											buffer.emit($$.label + ":");

											bphook(&$1);
											bphook(&$3);
											checkNumeral($1);
											checkNumeral($3);
											
											$$.type = std::string("BOOL");

											
											$$.reg = fresh("%t");
											/*
											if (largestType($1.type, $3.type) == "INT"){
												convertBytesToInt(&$1, &$3);
											}
											*/
											buffer.emit($$.reg + " = icmp " + processRelop(yylval.relop) + " i32 " + $1.reg + ", " + $3.reg);
											int location = buffer.emit("br i1 " + $$.reg + ", label @, label @");
											$$.truelist.push_back(std::pair<int, BranchLabelIndex>(location, FIRST));
											$$.falselist.push_back(std::pair<int, BranchLabelIndex>(location, SECOND));
											
										}
			| LPAREN Type RPAREN Exp	{
											$$.hooklabel = $4.hooklabel;
											$$.hooklist = $4.hooklist;
											//hook(&$$, "cast");
											//bphook(&$4);
											checkNumeral($4);
											checkNumeral($2);
											$$.type = $4.type;
											$$.reg = $4.reg;
											cast(&$$, $2.type);
											$$.type = std::string($2.type);
											//checkByteOverflow(&$$);
										}
;

%%
int main()
{
	std::ifstream t("print_functions.llvm");
	std::stringstream s;
	s << t.rdbuf();
	buffer.emit(s.str());
	buffer.emitGlobal("@divzero = internal constant [23 x i8] c\"Error division by zero\\00\"");
	int res = yyparse();
	manager.checkMain();
	///*output::endScope*/();
	manager.popScope();
	buffer.printGlobalBuffer();
	buffer.printCodeBuffer();
	return res;
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(1);
}
