%{
	#include <iostream>
	#include <cstdlib>
	#include <memory>

	#include "hw3_output.hpp"
	#include "types.hpp"
	#include "utils.hpp"

	TableManager manager;
	extern int yylex();
	extern int yylineno;
	extern int yyleng;
	extern char* yytext;
	int yyerror(const char * message);
%}


%right IF
%right ELSE

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ASSIGN
%token RELOP
%token <id> ID
%token NUM
%token STRING
%type <funcid> FuncID;
%type <FormalsList> Formals FormalsList
%type <ExpList> ExpList
%type <Func> FuncsDecl
%type <TYPE> Exp Type Call FormalDecl RetType

%left OR
%left AND
%left RELOP
%left ADD
%left MULT
%left NOT
%right LBRACE RBRACE LPAREN RPAREN

%%

Program 	: Funcs		{manager.checkMain();output::endScope();manager.popScope();}
;
Funcs		: /*epsilon*/		{}
			| FuncsDecl Funcs	{}
;
FuncsDecl 	: RetType FuncID LPAREN Formals RPAREN    /*some issues to solve scoping, legality of insertion, insertion of symbols in order*/
			{ /* this marker is $7 */
				
				FuncClass* func = new FuncClass();
				func->name = $2;
			    func->type = $1.type;
				func->params = $4.list;
				func->ret_type = $1.type;
                manager.insert(func);
				manager.newScope("func", func->ret_type);
				manager.insertParams($4.list);
			} LBRACE Statements RBRACE 	
{
	FuncClass *func = dynamic_cast<FuncClass*>(manager.get($2));
	if (func == nullptr)
	{
		printf("bad pointer");
		exit(1);
	}

	output::endScope();
	manager.popScope();

}
;
RetType 	: Type	{$$.type = $$.name = $1.type;}
			| VOID  {$$.type = "VOID";}
;
Formals 	: /*epsilon*/ {}
			| FormalsList 	{
								$$.list = $1.list;

							}
;
FormalsList : FormalDecl {$$.list.push_back(TYPEClass($1));}
			| FormalDecl COMMA FormalsList { $$.list.push_back($1); $$.list.insert( $$.list.end(), $3.list.begin(), $3.list.end() );}
;
FormalDecl 	: Type ID 	{
							if(manager.contains(yylval.id))
							{
								output::errorDef(yylineno, yylval.id);
							}
							$$.type = $1.type;
							$$.name = yylval.id;
						}
;
NEWSCOPE : {manager.newScope("if");};
ENDSCOPE : {output::endScope();manager.popScope();}
Statements 	: Statement
		   	| Statements Statement
;
Statement 	: LBRACE {manager.newScope("regular");} Statements RBRACE {output::endScope();manager.popScope();}

			| Type ID SC 			{ 
										/* insert new symbol */
										if (manager.contains(yylval.id))
										{
											output::errorDef(yylineno, yylval.id);
											exit(1);
										}
										else
										{
											TYPEClass* y = new TYPEClass(yylval.id, $1.type);
											manager.insertID(y);
										}
									}
			| Type ID ASSIGN {$2 = std::string(yylval.id);} Exp SC { 
										/* insert a symbol, maybe cast */
										if (manager.contains($2))
										{
											output::errorDef(yylineno, yylval.id);
											exit(1);
										}
										if (!legalAssign($5.type, $1.type))
										{
											output::errorMismatch(yylineno);
											exit(1);
										}
										else
										{
											TYPEClass* y = new TYPEClass($2, $1.type);
											manager.insertID(y);
										}
										
										/*todo*/
									}
			| ID ASSIGN Exp SC  	{ 
										/* maybe cast */
										TYPEClass* y = manager.get(yylval.id);
										if (y == nullptr)
										{
											output::errorUndef(yylineno, yylval.id);
											exit(1);
										}
										if (!legalAssign($3.type, y->type))
										{
											cout << "$3.type = " << $3.type << " ,  y->type =  " <<  y->type << endl;
											output::errorMismatch(yylineno);
											exit(1);
										}
									}
			| Call SC				{									
									}
			| RETURN SC				{	
										/* check void ret type */
										if (!manager.legalReturn("VOID"))
										{
											/* error return mismatch*/
											output::errorMismatch(yylineno);
											exit(1);
										}

									}
			| RETURN Exp SC			{ /* check NOT void ret type */
										if (!manager.legalReturn($2.type))
										{
											/* error return mismatch*/
											output::errorMismatch(yylineno);
											exit(1);
										}
									}
			| IF LPAREN Exp RPAREN NEWSCOPE Statement ENDSCOPE %prec IF
			| IF LPAREN Exp RPAREN NEWSCOPE Statement ENDSCOPE ELSE {manager.newScope("else");}Statement {output::endScope();manager.popScope();}
			| WHILE LPAREN Exp RPAREN {manager.newScope("while");} Statement {output::endScope();manager.popScope();}

			| BREAK SC  	{ 
								if (!manager.inScope("while"))
								{
								    output::errorUnexpectedBreak(yylineno);
									exit(1);
								}
							}
			| CONTINUE SC   {
								if (!manager.inScope("while"))
								{
									output::errorUnexpectedContinue(yylineno);
									exit(1);
								}
							}
;
Call 		: FuncID LPAREN 	{
												FuncClass* func = (FuncClass*)(manager.get($1));
											
												if (func == nullptr)
												{
													output::errorUndef(yylineno, $1);
													exit(1);
												}
								}   ExpList RPAREN	{
												FuncClass* func = (FuncClass*)(manager.get($1));
											
												if (func == nullptr)
												{
													output::errorUndef(yylineno, $1);
													exit(1);
												}
												if (!func->legalParams($4.list)){
													std::vector<std::string> types;
													for (TYPEClass y: func->params)
													{
														types.push_back(y.type);
													}
													
													output::errorPrototypeMismatch(yylineno, func->name, types);
													exit(1);
												}
												$$.type = func->ret_type;
												
								}
	 		| FuncID LPAREN RPAREN				{
												FuncClass* func = (FuncClass*)(manager.get(yylval.id));
												if (func == nullptr)
												{
													output::errorUndef(yylineno, yylval.id);
													exit(1);
												}
												$$.type = func->ret_type;
											}
;
FuncID 		: ID {$$ = yylval.id;};
ExpList 	: Exp	{ $$.list.push_back($1);}
			| Exp COMMA ExpList		{$$.list.push_back($1); $$.list.insert( $$.list.end(), $3.list.begin(), $3.list.end() );}
;
Type 		: INT	{ $$.type = "INT";}
			| BYTE	{ $$.type = "BYTE";}
			| BOOL	{ $$.type = "BOOL";}
;
Exp 		: LPAREN Exp RPAREN	{$$.type = $2.type;}                  /*TYPES HAVE TO BE CAPITILIZED LIKE RULES GIVEN IN HW3 PDF*/
			| Exp IF LPAREN Exp RPAREN ELSE Exp {
													checkBoolean($4);
													if (isNumeral($1) && isNumeral($7))
													{
														$$.type = largestType($1.type, $7.type);
													}
													else if ($1.type != $7.type)
													{
														output::errorMismatch(yylineno);
														exit(1);
													}
													else
													{
														$$.type = $1.type;
													}
												}
			| Exp ADD Exp 				{
											checkNumeral($1);
											checkNumeral($3);
											$$.type = largestType($1.type, $3.type);
										}
			| Exp MULT Exp				{	
											checkNumeral($1);
											checkNumeral($3);
											$$.type = largestType($1.type, $3.type);
										}
			| ID 						{
											TYPEClass* y = manager.get(yylval.id);
											if (y == nullptr)
											{
												output::errorUndef(yylineno, yylval.id);
												exit(1);
											}
											$$.type = y->type;

										}
			| Call						{$$.type = $1.type;}
			| NUM						{$$.type = "INT";}
			| NUM B 					{$$.type = "BYTE";}
			| STRING					{$$.type = "STRING";}
			| TRUE						{$$.type = "BOOL";}
			| FALSE						{$$.type = "BOOL";}
			| NOT Exp					{
											checkBoolean($2);
											$$.type = "BOOL";
										}
			| Exp AND Exp				{
											checkBoolean($1);
											checkBoolean($3);
											$$.type = std::string("BOOL");
										}
			| Exp OR Exp				{
											checkBoolean($1);
											checkBoolean($3);
											$$.type = std::string("BOOL");
										}
			| Exp RELOP Exp				{
											checkNumeral($1);
											checkNumeral($3);
											$$.type = std::string("BOOL");
										}
			| LPAREN Type RPAREN Exp	{
											checkNumeral($4);
											checkNumeral($2);
											$$.type = std::string($2.type);
										}
;

%%
int main()
{
	return yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(1);
}
